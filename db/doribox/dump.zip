                                 // 1509
      };                                                                                                               // 1510
      var connection = null;                                                                                           // 1511
      var currentInvocation = DDP._CurrentInvocation.get();                                                            // 1512
      if (currentInvocation) {                                                                                         // 1513
        userId = currentInvocation.userId;                                                                             // 1514
        setUserId = function(userId) {                                                                                 // 1515
          currentInvocation.setUserId(userId);                                                                         // 1516
        };                                                                                                             // 1517
        connection = currentInvocation.connection;                                                                     // 1518
      }                                                                                                                // 1519
                                                                                                                       // 1520
      var invocation = new MethodInvocation({                                                                          // 1521
        isSimulation: false,                                                                                           // 1522
        userId: userId,                                                                                                // 1523
        setUserId: setUserId,                                                                                          // 1524
        connection: connection,                                                                                        // 1525
        randomSeed: makeRpcSeed(currentInvocation, name)                                                               // 1526
      });                                                                                                              // 1527
      try {                                                                                                            // 1528
        var result = DDP._CurrentInvocation.withValue(invocation, function () {                                        // 1529
          return maybeAuditArgumentChecks(                                                                             // 1530
            handler, invocation, EJSON.clone(args), "internal call to '" +                                             // 1531
              name + "'");                                                                                             // 1532
        });                                                                                                            // 1533
        result = EJSON.clone(result);                                                                                  // 1534
      } catch (e) {                                                                                                    // 1535
        exception = e;                                                                                                 // 1536
      }                                                                                                                // 1537
    }                                                                                                                  // 1538
                                                                                                                       // 1539
    // Return the result in whichever way the caller asked for it. Note that we                                        // 1540
    // do NOT block on the write fence in an analogous way to how the client                                           // 1541
    // blocks on the relevant data being visible, so you are NOT guaranteed that                                       // 1542
    // cursor observe callbacks have fired when your callback is invoked. (We                                          // 1543
    // can change this if there's a real use case.)                                                                    // 1544
    if (callback) {                                                                                                    // 1545
      callback(exception, result);                                                                                     // 1546
      return undefined;                                                                                                // 1547
    }                                                                                                                  // 1548
    if (exception)                                                                                                     // 1549
      throw exception;                                                                                                 // 1550
    return result;                                                                                                     // 1551
  },                                                                                                                   // 1552
                                                                                                                       // 1553
  _urlForSession: function (sessionId) {                                                                               // 1554
    var self = this;                                                                                                   // 1555
    var session = self.sessions[sessionId];                                                                            // 1556
    if (session)                                                                                                       // 1557
      return session._socketUrl;                                                                                       // 1558
    else                                                                                                               // 1559
      return null;                                                                                                     // 1560
  }                                                                                                                    // 1561
});                                                                                                                    // 1562
                                                                                                                       // 1563
var calculateVersion = function (clientSupportedVersions,                                                              // 1564
                                 serverSupportedVersions) {                                                            // 1565
  var correctVersion = _.find(clientSupportedVersions, function (version) {                                            // 1566
    return _.contains(serverSupportedVersions, version);                                                               // 1567
  });                                                                                                                  // 1568
  if (!correctVersion) {                                                                                               // 1569
    correctVersion = serverSupportedVersions[0];                                                                       // 1570
  }                                                                                                                    // 1571
  return correctVersion;                                                                                               // 1572
};                                                                                                                     // 1573
                                                                                                                       // 1574
LivedataTest.calculateVersion = calculateVersion;                                                                      // 1575
                                                                                                                       // 1576
                                                                                                                       // 1577
// "blind" exceptions other than those that were deliberately thrown to signal                                         // 1578
// errors to the client                                                                                                // 1579
var wrapInternalException = function (exception, context) {                                                            // 1580
  if (!exception || exception instanceof Meteor.Error)                                                                 // 1581
    return exception;                                                                                                  // 1582
                                                                                                                       // 1583
  // tests can set the 'expected' flag on an exception so it won't go to the                                           // 1584
  // server log                                                                                                        // 1585
  if (!exception.expected) {                                                                                           // 1586
    Meteor._debug("Exception " + context, exception.stack);                                                            // 1587
    if (exception.sanitizedError) {                                                                                    // 1588
      Meteor._debug("Sanitized and reported to the client as:", exception.sanitizedError.message);                     // 1589
      Meteor._debug();                                                                                                 // 1590
    }                                                                                                                  // 1591
  }                                                                                                                    // 1592
                                                                                                                       // 1593
  // Did the error contain more details that could have been useful if caught in                                       // 1594
  // server code (or if thrown from non-client-originated code), but also                                              // 1595
  // provided a "sanitized" version with more context than 500 Internal server                                         // 1596
  // error? Use that.                                                                                                  // 1597
  if (exception.sanitizedError) {                                                                                      // 1598
    if (exception.sanitizedError instanceof Meteor.Error)                                                              // 1599
      return exception.sanitizedError;                                                                                 // 1600
    Meteor._debug("Exception " + context + " provides a sanitizedError that " +                                        // 1601
                  "is not a Meteor.Error; ignoring");                                                                  // 1602
  }                                                                                                                    // 1603
                                                                                                                       // 1604
  return new Meteor.Error(500, "Internal server error");                                                               // 1605
};                                                                                                                     // 1606
                                                                                                                       // 1607
                                                                                                                       // 1608
// Audit argument checks, if the audit-argument-checks package exists (it is a                                         // 1609
// weak dependency of this package).                                                                                   // 1610
var maybeAuditArgumentChecks = function (f, context, args, description) {                                              // 1611
  args = args || [];                                                                                                   // 1612
  if (Package['audit-argument-checks']) {                                                                              // 1613
    return Match._failIfArgumentsAreNotAllChecked(                                                                     // 1614
      f, context, args, description);                                                                                  // 1615
  }                                                                                                                    // 1616
  return f.apply(context, args);                                                                                       // 1617
};                                                                                                                     // 1618
                                                                                                                       // 1619
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                          